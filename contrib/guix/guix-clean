#!/usr/bin/env bash
export LC_ALL=C
set -e -o pipefail

# Parse command line arguments
CLEAN_BUILD_DIRS=false
for arg in "$@"; do
    case $arg in
        --build-dirs)
            CLEAN_BUILD_DIRS=true
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [--build-dirs]"
            echo "  --build-dirs    Also clean guix-build-* directories and stale symlinks"
            exit 0
            ;;
    esac
done

# Source the common prelude, which:
#   1. Checks if we're at the top directory of the Bitcoin Core repository
#   2. Defines a few common functions and variables
#
# shellcheck source=libexec/prelude.bash
source "$(dirname "${BASH_SOURCE[0]}")/libexec/prelude.bash"


###################
## Sanity Checks ##
###################

################
# Required non-builtin commands should be invokable
################

check_tools cat mkdir make git guix


#############
##  Clean  ##
#############

# Usage: under_dir MAYBE_PARENT MAYBE_CHILD
#
# If MAYBE_CHILD is a subdirectory of MAYBE_PARENT, print the relative path
# from MAYBE_PARENT to MAYBE_CHILD. Otherwise, return 1 as the error code.
#
# NOTE: This does not perform any symlink-resolving or path canonicalization.
#
under_dir() {
    local path_residue
    path_residue="${2##"${1}"}"
    if [ -z "$path_residue" ] || [ "$path_residue" = "$2" ]; then
        return 1
    else
        echo "$path_residue"
    fi
}

# Usage: dir_under_git_root MAYBE_CHILD
#
# If MAYBE_CHILD is under the current git repository and exists, print the
# relative path from the git repository's top-level directory to MAYBE_CHILD,
# otherwise, exit with an error code.
#
dir_under_git_root() {
    local rv
    rv="$(under_dir "$(git_root)" "$1")"
    [ -n "$rv" ] && echo "$rv"
}

shopt -s nullglob
found_precious_dirs_files=( "${version_base_prefix}"*/"${var_base_basename}/precious_dirs" ) # This expands to an array of directories...
shopt -u nullglob

exclude_flags=()

for precious_dirs_file in "${found_precious_dirs_files[@]}"; do
    # Make sure the precious directories (e.g. SOURCES_PATH, BASE_CACHE, SDK_PATH)
    # are excluded from git-clean
    echo "Found precious_dirs file: '${precious_dirs_file}'"

    # Exclude the precious_dirs file itself
    if dirs_file_exclude_fragment=$(dir_under_git_root "$(dirname "$precious_dirs_file")"); then
        exclude_flags+=( --exclude="${dirs_file_exclude_fragment}/precious_dirs" )
    fi

    # Read each 'name=dir' pair from the precious_dirs file
    while IFS='=' read -r name dir; do
        # Add an exclusion flag if the precious directory is under the git root.
        if under=$(dir_under_git_root "$dir"); then
            echo "Avoiding ${name}: ${under}"
            exclude_flags+=( --exclude="$under" )
        fi
    done < "$precious_dirs_file"
done

# Always preserve the guix patches directory
exclude_flags+=( --exclude="contrib/guix/patches" )

git clean -xdff "${exclude_flags[@]}"

# Clean Guix build directories if requested
if [ "$CLEAN_BUILD_DIRS" = true ]; then
    echo "Cleaning Guix build directories..."

    # Find and clean guix-build-* directories
    for build_dir in guix-build-*; do
        if [ -d "$build_dir" ]; then
            echo "Removing $build_dir"
            # Clean up stale symlinks first (in case they point to deleted store paths)
            if [ -d "$build_dir/var/profiles" ]; then
                find "$build_dir/var/profiles" -type l -exec sh -c '
                    for link; do
                        if [ ! -e "$link" ]; then
                            echo "Removing stale symlink: $link"
                            rm -f "$link"
                        fi
                    done
                ' _ {} +
            fi
            # Remove the entire build directory
            rm -rf "$build_dir"
        fi
    done
    echo "Guix build directory cleanup complete"
fi
